#!/usr/bin/env python
# Acknowledge: This file originates from pytorch/xla:setup.py
#
# Environment variables you are probably interested in:
#
#   DEBUG
#     build with -O0 and -g (debug symbols)
#
#   TORCH_XLA_VERSION
#     specify the version of PyTorch/XLA, rather than the hard-coded version
#     in this file; used when we're building binaries for distribution
#
#   VERSIONED_XLA_BUILD
#     creates a versioned build
#
#   LAZY_XLA_PACKAGE_NAME
#     change the package name to something other than 'lazy_xla'
#
#   COMPILE_PARALLEL=1
#     enable parallel compile
#
#   BUILD_CPP_TESTS=1
#     build the C++ tests
#
#   XLA_DEBUG=0
#     build the xla/xrt client in debug mode
#
#   XLA_BAZEL_VERBOSE=0
#     turn on verbose messages during the bazel build of the xla/xrt client
#
#   XLA_CUDA=0
#     build the xla/xrt client with CUDA enabled
#

from __future__ import print_function
from os.path import join

from setuptools import setup, find_packages, distutils
from torch.utils.cpp_extension import BuildExtension, CppExtension
import distutils.ccompiler
import distutils.command.clean
import warnings
import glob
import inspect
import multiprocessing
import multiprocessing.pool
import os
import imp
import platform
import re
import shutil
import subprocess
import sys
import site
import torch

import tvm
import mnm

base_dir = os.path.dirname(os.path.abspath(__file__))
lazy_core_dir = os.getenv("LTC_SOURCE_PATH", os.path.join(base_dir, "..", "lazy_tensor_core"))
pytorch_dir = os.getenv("PYTORCH_SOURCE_PATH", os.path.dirname(base_dir))
third_party_path = os.path.join(base_dir, "third_party")


def _get_build_mode():
    for i in range(1, len(sys.argv)):
        if not sys.argv[i].startswith("-"):
            return sys.argv[i]


def _check_env_flag(name, default=""):
    return os.getenv(name, default).upper() in ["ON", "1", "YES", "TRUE", "Y"]


def get_git_head_sha(base_dir):
    mnm_git_sha = (
        subprocess.check_output(["git", "rev-parse", "HEAD"], cwd=base_dir).decode("ascii").strip()
    )
    if os.path.isdir(os.path.join(base_dir, "..", ".git")):
        torch_git_sha = (
            subprocess.check_output(["git", "rev-parse", "HEAD"], cwd=os.path.join(base_dir, ".."))
            .decode("ascii")
            .strip()
        )
    else:
        torch_git_sha = ""
    return mnm_git_sha, torch_git_sha


def get_build_version(mnm_git_sha):
    version = os.getenv("TORCH_MNM_VERSION", "1.9")
    if _check_env_flag("VERSIONED_MNM_BUILD", default="0"):
        try:
            version += "+" + mnm_git_sha[:7]
        except Exception:
            pass
    return version


def create_version_files(base_dir, version, mnm_git_sha, torch_git_sha):
    print("Building torch_mnm version: {}".format(version))
    print("MNM Commit ID: {}".format(mnm_git_sha))
    print("PyTorch Commit ID: {}".format(torch_git_sha))
    py_version_path = os.path.join(base_dir, "torch_mnm", "version.py")
    with open(py_version_path, "w") as f:
        f.write('"""Autogenerated file, do not edit!"""\n')
        f.write("__version__ = '{}'\n".format(version))
        f.write("__mnm_gitrev__ = '{}'\n".format(mnm_git_sha))
        f.write("__torch_gitrev__ = '{}'\n".format(torch_git_sha))

    cpp_version_path = os.path.join(base_dir, "torch_mnm", "csrc", "version.cpp")
    with open(cpp_version_path, "w") as f:
        f.write("// Autogenerated file, do not edit!\n")
        f.write('#include "torch_mnm/csrc/version.h"\n\n')
        f.write("namespace torch_mnm {\n\n")
        f.write('const char MNM_GITREV[] = {{"{}"}};\n'.format(mnm_git_sha))
        f.write('const char TORCH_GITREV[] = {{"{}"}};\n\n'.format(torch_git_sha))
        f.write("}  // namespace torch_mnm\n")


def generate_mnm_aten_code(base_dir):
    generate_code_cmd = [os.path.join(base_dir, "scripts", "generate_code.sh")]
    if subprocess.call(generate_code_cmd, env=dict(os.environ, PTDIR=str(pytorch_dir))) != 0:
        print("Failed to generate ATEN bindings: {}".format(generate_code_cmd), file=sys.stderr)
        sys.exit(1)


def apply_patches():
    apply_patches_cmd = [os.path.join(base_dir, "scripts", "apply_patches.sh")]
    if subprocess.call(apply_patches_cmd, env=dict(os.environ, PTDIR=str(pytorch_dir))) != 0:
        warnings.warn("Failed to apply patches: {}".format(apply_patches_cmd))


def build_extra_libraries(base_dir, build_mode=None):
    build_libs_cmd = [os.path.join(base_dir, "build_torch_mnm_libs.sh")]
    cxx_abi = getattr(torch._C, "_GLIBCXX_USE_CXX11_ABI", None)
    if cxx_abi is not None:
        build_libs_cmd += ["-O", "-D_GLIBCXX_USE_CXX11_ABI={}".format(int(cxx_abi))]
    if build_mode is not None:
        build_libs_cmd += [build_mode]
    if subprocess.call(build_libs_cmd) != 0:
        print("Failed to build external libraries: {}".format(build_libs_cmd), file=sys.stderr)
        sys.exit(1)


def _compile_parallel(
    self,
    sources,
    output_dir=None,
    macros=None,
    include_dirs=None,
    debug=0,
    extra_preargs=None,
    extra_postargs=None,
    depends=None,
):
    # Those lines are copied from distutils.ccompiler.CCompiler directly.
    macros, objects, extra_postargs, pp_opts, build = self._setup_compile(
        output_dir, macros, include_dirs, sources, depends, extra_postargs
    )
    cc_args = self._get_cc_args(pp_opts, debug, extra_preargs)

    def compile_one(obj):
        try:
            src, ext = build[obj]
        except KeyError:
            return
        self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts)

    list(multiprocessing.pool.ThreadPool(multiprocessing.cpu_count()).imap(compile_one, objects))
    return objects


# Plant the parallel compile function.
if _check_env_flag("COMPILE_PARALLEL", default="1"):
    try:
        if inspect.signature(distutils.ccompiler.CCompiler.compile) == inspect.signature(
            _compile_parallel
        ):
            distutils.ccompiler.CCompiler.compile = _compile_parallel
    except:
        pass


class Clean(distutils.command.clean.clean):
    def run(self):
        import glob
        import re

        with open(".gitignore", "r") as f:
            ignores = f.read()
            pat = re.compile(r"^#( BEGIN NOT-CLEAN-FILES )?")
            for wildcard in filter(None, ignores.split("\n")):
                match = pat.match(wildcard)
                if match:
                    if match.group(1):
                        # Marker is found and stop reading .gitignore.
                        break
                    # Ignore lines which begin with '#'.
                else:
                    for filename in glob.glob(wildcard):
                        try:
                            os.remove(filename)
                        except OSError:
                            shutil.rmtree(filename, ignore_errors=True)

        # It's an old-style class in Python 2.7...
        distutils.command.clean.clean.run(self)


class Build(BuildExtension):
    def run(self):
        # Run the original BuildExtension first. We need this before building
        # the tests.
        BuildExtension.run(self)
        if _check_env_flag("BUILD_CPP_TESTS", default="1"):
            # Build the C++ tests.
            cmd = [os.path.join(base_dir, "test/cpp/run_tests.sh"), "-B"]
            if subprocess.call(cmd) != 0:
                print("Failed to build tests: {}".format(cmd), file=sys.stderr)
                sys.exit(1)


mnm_git_sha, torch_git_sha = get_git_head_sha(base_dir)
version = get_build_version(mnm_git_sha)
build_mode = _get_build_mode()
if build_mode not in ["clean"]:
    # Generate version info (lazy_xla.__version__).
    create_version_files(base_dir, version, mnm_git_sha, torch_git_sha)
    # Apply code patches for PyTorch
    apply_patches()
    # Generate the code before globbing!
    generate_mnm_aten_code(base_dir)

# Fetch the sources to be built.
torch_mnm_sources = (
    glob.glob("torch_mnm/csrc/*.cpp")
    + glob.glob("torch_mnm/csrc/ops/*.cpp")
    + glob.glob("torch_mnm/csrc/compiler/*.cpp")
    + glob.glob("torch_mnm/csrc/serialization/*.cpp")
    + glob.glob("torch_mnm/csrc/value_ext/*.cpp")
    + glob.glob("torch_mnm/csrc/pass_ext/*.cpp")
    + glob.glob("third_party/client/*.cpp")
)

# Constant known variables used throughout this file.
lib_path = os.path.join(base_dir, "torch_mnm/lib")

# Setup include directories folders.
include_dirs = [
    base_dir,
    lazy_core_dir,
    pytorch_dir,
    third_party_path,
    os.path.join(third_party_path, "meta/include"),
    os.path.join(third_party_path, "meta/3rdparty/tvm/include"),
    os.path.join(third_party_path, "meta/3rdparty/tvm/3rdparty/compiler-rt"),
    os.path.join(third_party_path, "meta/3rdparty/tvm/3rdparty/dmlc-core/include"),
    os.path.join(third_party_path, "meta/3rdparty/tvm/3rdparty/dlpack/include"),
    os.path.join(pytorch_dir, "torch/csrc"),
    os.path.join(pytorch_dir, "torch/lib/tmp_install/include"),
    os.path.join(lazy_core_dir, "third_party/abseil-cpp"),
]

tvm_library_dir = os.path.dirname(tvm._ffi.libinfo.find_lib_path()[0])
mnm_library_dir = os.path.dirname(mnm._lib.find_lib_path()[0])
library_dirs = [
    os.path.dirname(imp.find_module("_LAZYC")[1]),
    tvm_library_dir,
    mnm_library_dir,
]

DEBUG = _check_env_flag("DEBUG")
IS_DARWIN = platform.system() == "Darwin"
IS_LINUX = platform.system() == "Linux"


def make_relative_rpath(path):
    if IS_DARWIN:
        return "-Wl,-rpath,@loader_path/" + path
    else:
        return "-Wl,-rpath,$ORIGIN/" + path


extra_compile_args = [
    "-std=c++14",
    "-Wno-sign-compare",
    "-Wno-unknown-pragmas",
    "-Wno-deprecated-declarations",
    "-Wno-return-type",
]

if re.match(r"clang", os.getenv("CC", "")):
    extra_compile_args += [
        "-Wno-macro-redefined",
        "-Wno-return-std-move",
    ]

if DEBUG:
    extra_compile_args += ["-O0", "-g"]
else:
    extra_compile_args += ["-DNDEBUG"]

PY_VERSION = "".join(sys.version[:3].split("."))
extra_link_args = [
    f"-l:_LAZYC.cpython-{PY_VERSION}m-x86_64-linux-gnu.so",
    "-lmnm",
    "-ltvm",
    make_relative_rpath(""),
    "-Wl,-rpath,{}".format(site.getsitepackages()[0]),
] + (["-O0", "-g"] if DEBUG else [])

setup(
    name="torch_mnm",
    version=version,
    # Exclude the build files.
    packages=find_packages(exclude=["build"]),
    ext_modules=[
        CppExtension(
            "_TORCHMNMC",
            torch_mnm_sources,
            include_dirs=include_dirs,
            extra_compile_args=extra_compile_args,
            library_dirs=library_dirs,
            extra_link_args=extra_link_args,
        ),
    ],
    data_files=[],
    cmdclass={
        "build_ext": Build,
        "clean": Clean,
    },
)
